git stash             暂存修改
git stash list       打印当前所有的Git栈信息
git stash pop      恢复最后一次stash的修改，并将其移除出list
git stash apply   恢复修改
git stash apply stash@{1}  就可以将你指定版本号为stash@{1}的工作取出来
git stash clear      清除所有的栈信息

---------------------------------------------------------------------------------------------------------

1) 回退版本
    将本地的状态回退到和远程的一样:  $ git reset --hard origin/MSM8937_6.0_Int
    回退到某一个版本，保留工作区和暂存区的内容:  $ git reset --soft commit-id
    回退到某一个版本，工作区和暂存区的改动都会丢失:  $ git reset --hard commit-id

2) Stash未提交的更改
   正在修改某个bug或者某个特性，又突然被要求展示工作。而现在所做的工作还不足以提交，这个阶段还无法进行展示(不能回到更改之前)。
   git stash在本质上会取走所有的变更并存储它们以备将来使用。
   $ git stash
   检查stash列表：$ git stash list
   想解除stash并且恢复未提交的变更，就进行：$ git stash apply
   如果只想留有余地进行apply stash，给apply添加特定的标识符：$ git stash apply stash@{0}

3) 使用git合并多个提交
   假设要合并最后的2个提交，可以按如下命令进行
   1、$ git rebase -i HEAD~2
   2、运行完该命令后，将第二个pick修改为squash或者s，然后输入":wq"退出
   3、这时git会自动第二个提交合并到第一个中去。并提示输入新的message（就是我们常说的comments）
   4、编辑输入新的message，然后输入":wq"退出
   5、此时本地的（HEAD中）最后两次提交已经被合并为一个，git log可以查看。

--------------------------------------------------------------------------------------------------------
1、递归删除指定目录下的.git文件
      find . -name .git | xargs rm -rf
2、初始化git仓库
      git init
3、配置用户名和邮箱
      git config --global user.name "lijian1"
      git config --global user.email "lijian1@yulong.com"
      
      git config --list

4、将修改添加到git暂存区
      git add -A      添加所有改动
      git add .         添加新建和修改的文件，不添加删除的文件
      git add -u      添加修改和删除的文件，不添加新建的文件

5、解决冲突
      git fetch origin
      git rebase origin/MSM8952_6.0_Int
      修改冲突文件
      git add .
      git rebase --continue
      git push origin HEAD:refs/for/MSM8952_6.0_Int

6、回退操作
      git reset --soft commit-id     //回退到某一个版本，保留工作区和暂存区的内容
      git reset --hard commit-id   //回退到某一个版本，工作区和暂存区的改动都会丢失

7、当前创建分支跟踪远程分支
      git checkout --track remotes/origin/MSM8952_6.0_Int
      Push时提示non-fast-forward：git pull --rebase

8、如何回退三个版本？
      commit  20160128000000000000000000000000
      commit  20160127000000000000000000000000
      commit  20160126000000000000000000000000

      git revert  20160128
      wq!
      git revert  20160127
      wq!
      git revert  20160126
      wq!
      git reset 20160126
      git add -u
      git commit -s -m "TFS_393109:lijian_revert myswitch modify"
      git push origin HEAD:CP_AGPSSettings_Dev

9、git cherry-pick  用于把另一个本地分支的commit修改应用到当前分支。
     将Dev流提交的代码(commit  20160126000000000000000000000000)，再次提交至Int流
     git checkout MSM8952_Int
     git cherry-pick 201601260000000000


Git如何进行分支管理？
     1、创建分支
     创建分支很简单：git branch <分支名>
     2、切换分支
     git checkout <分支名>
     该语句和上一个语句可以和起来用一个语句表示：git checkout -b <分支名>
     3、分支合并
     比如，如果要将开发中的分支（develop），合并到稳定分支（master），
     首先切换的master分支：git checkout master。
     然后执行合并操作：git merge develop。
     如果有冲突，会提示你，调用git status查看冲突文件。
     解决冲突，然后调用git add或git rm将解决后的文件暂存。
     所有冲突解决后，git commit 提交更改。
     4、分支衍合
     分支衍合和分支合并的差别在于，分支衍合不会保留合并的日志，不留痕迹，而 分支合并则会保留合并的日志。
     要将开发中的分支（develop），衍合到稳定分支（master）。
     首先切换的master分支：git checkout master。
     然后执行衍和操作：git rebase develop。
     如果有冲突，会提示你，调用git status查看冲突文件。
     解决冲突，然后调用git add或git rm将解决后的文件暂存。
     所有冲突解决后，git rebase --continue 提交更改。
     5、删除分支
     执行git branch -d <分支名>
     如果该分支没有合并到主分支会报错，可以用以下命令强制删除git branch -D <分支名>

------------------------------------------------------------------------------------------------------------
1、生成公钥   
     ssh-keygen  -t  rsa
     Windows pub 文件位置：C:\Users\lijian1\.ssh\id_rsa.pub

2、拷贝钩子脚本到本地    
     scp -P 29418 -p 10.1.11.34:/hooks/commit-msg .git/hooks/
     
-----------------------------------------------------------------------------------------------------------
     
1、Android apk 工程 .gitignore参考写法:

#
# NOTE! Don't add files that are generated in specific
# subdirectories here. Add them in the ".gitignore" file
# in that subdirectory instead.
#
# NOTE! Please use 'git ls-files -i --exclude-standard'
# command after changing this file, to see if there are
# any tracked files which get ignored after the change.
#
# Normal rules
#
# built application files
*.apk
*.ap_

# files for the dex VM
*.dex

# Java class files
*.class

# generated files
bin/
gen/

# Local configuration file (sdk path, etc)
local.properties

# Eclipse project files
.classpath
.project

# Proguard folder generated by Eclipse
proguard/

# Intellij project files
*.iml
*.ipr
*.iws
.idea/